// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  age           Int?
  role          String?         
  image         String?
  companyName   String?
  phoneNumber   String?
  country       String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  studentProfile Student?
  volunteerProfile Volunteer?
  expertProfile Expert?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Group {
  id        String @id @default(cuid())
  name      String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relation to programmes
  programmes Programme[]

  @@map("groups")
}

model Programme {
  id               String @id @default(cuid())
  name             String
  students         Int    @default(0)
  volunteers       Int    @default(0)
  specialEducators Int    @default(0) @map("special_educators")
  imageUrl         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Foreign key to Group
  groupId String @map("group_id")
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  // Relations to members - these field names must match the @relation names in the member models
  enrolledStudents    Student[]   @relation("enrolledStudents")
  enrolledVolunteers  Volunteer[] @relation("enrolledVolunteers")
  enrolledExperts     Expert[]    @relation("enrolledExperts")

  @@map("programmes")
}

// Using your existing Organisation model
model Organisation {
  id        String   @id @default(cuid())
  name      String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations to members
  students   Student[]
  volunteers Volunteer[]
  experts    Expert[]

  @@map("organisations")
}

model Meeting {
  id            String   @id @default(cuid())
  title         String
  participants  String[] // Array of participant emails/names
  date          DateTime   // Date in YYYY-MM-DD format (e.g., "2024-05-23")
  startDateTime DateTime // ISO 8601 datetime string (e.g., "2022-05-23T21:00:00.000Z")
  endDateTime   DateTime // ISO 8601 datetime string (e.g., "2022-05-23T22:00:00.000Z")
  repeat        String   @default("Does not repeat")
  location      String?
  description   String?
  isAllDay      Boolean  @default(false)
  makeOpenEvent Boolean  @default(false)
  videoCall     String?  // zoom, google-meet, microsoft-teams, etc.
  videoCallLink String?
 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
 
  @@map("meetings")
}

model Student {
  id                     String        @id @default(cuid())
  userId                 String        @unique
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                   String
  age                    Int
  email                  String        @unique
  skills                 String?       // JSON string or separate Skills model
  areaOfInterest         String?
  readingCapacity        String?
  preferredLanguages     String?       // JSON array as string
  fineMotorDevelopment   String?
  interactionCapacity    String?
  onlineClassExperience  String?
  attentionSpan          String?       // Store as string (e.g., "30 minutes")
  triggeringFactors      String?       // Text field
  happyMoments           String?       // Text field
  disability             String?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  
  // Foreign Keys
  volunteerAssignedId    String?
  programmeEnrolledId    String?
  organisationId         String?
  
  // Relations
  volunteerAssigned      Volunteer?    @relation("VolunteerStudents", fields: [volunteerAssignedId], references: [id])
  programmeEnrolled      Programme?    @relation("enrolledStudents", fields: [programmeEnrolledId], references: [id])
  organisation           Organisation? @relation(fields: [organisationId], references: [id])
  
  @@map("students")
}

model Volunteer {
  id                      String        @id @default(cuid())
  userId                  String        @unique
  user                    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                    String
  age                     Int
  email                   String        @unique
  contactNumber           String?
  educationalQualification String?
  preferredLanguages      String?       // JSON array as string
  experience              String?       // Text field
  profession              String?
  whatMotivatesYou        String?       // Text field
  feedback                String?       // Text field
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  
  // Foreign Keys
  programmeEnrolledId     String?
  organisationId          String?
  expertAssignedId        String?
  
  // Relations
  programmeEnrolled       Programme?    @relation("enrolledVolunteers", fields: [programmeEnrolledId], references: [id])
  organisation            Organisation? @relation(fields: [organisationId], references: [id])
  expertAssigned          Expert?       @relation("ExpertVolunteers", fields: [expertAssignedId], references: [id])
  
  // Reverse relations
  assignedStudents        Student[]     @relation("VolunteerStudents")
  
  @@map("volunteers")
}

model Expert {
  id                      String        @id @default(cuid())
  userId                  String        @unique
  user                    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                    String
  age                     Int
  email                   String        @unique
  profession              String?
  educationalQualification String?
  feedback                String?       // Text field for expert insights
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  
  // Foreign Keys
  programmeEnrolledId     String?
  organisationId          String?
  
  // Relations
  programmeEnrolled       Programme?    @relation("enrolledExperts", fields: [programmeEnrolledId], references: [id])
  organisation            Organisation? @relation(fields: [organisationId], references: [id])
  
  // Reverse relations
  assignedVolunteers      Volunteer[]   @relation("ExpertVolunteers")
  
  @@map("experts")
}

model Activity {
  id            String         @id @default(cuid())
  imageUrl      String
  title         String
  date          DateTime
  pdfUrl        String?
  time          String?         //store time as string (e.g., "10:00 AM")
  category      String?
  feedback      String?         // Text field for feedback  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relationship to prerequisites
  prerequisites Prerequisite[]
  
  @@map("activities")
}

model Prerequisite {
  id         String   @id @default(cuid())
  imageUrl   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Foreign key to activity
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  @@map("prerequisites")
}